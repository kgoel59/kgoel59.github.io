<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://karangoel59.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://karangoel59.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-02T12:25:20+11:00</updated><id>https://karangoel59.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">CSCI946 - Big Data Analytics Week 4</title><link href="https://karangoel59.com/blog/2024/big-data-week4/" rel="alternate" type="text/html" title="CSCI946 - Big Data Analytics Week 4"/><published>2024-08-13T01:09:00+10:00</published><updated>2024-08-13T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/big-data-week4</id><content type="html" xml:base="https://karangoel59.com/blog/2024/big-data-week4/"><![CDATA[<h3 id="big-data-analytics-week-3-clustering-and-hypothesis-testing">Big Data Analytics Week 3: Clustering and Hypothesis Testing</h3> <p>In Week 3 of CSCI946 - Big Data Analytics, we delved into two essential topics: <strong>Hypothesis Testing</strong> and <strong>Clustering Analysis</strong>. These are fundamental techniques in data science and analytics, providing the groundwork for data-driven decision-making and pattern recognition in large datasets.</p> <h4 id="hypothesis-testing">Hypothesis Testing</h4> <p>Hypothesis testing is a statistical method that allows us to make inferences about a population based on sample data. The process involves testing an assumption, known as the <strong>null hypothesis (H0)</strong>, against an alternative hypothesis (HA). Depending on the nature of the data and the specific hypotheses being tested, different types of tests can be applied.</p> <ol> <li> <p><strong>Student’s t-test</strong>: Used when comparing the means of two populations that are normally distributed with similar variances.</p> </li> <li> <p><strong>Welch’s t-test</strong>: Similar to the Student’s t-test but used when the populations have different variances.</p> </li> <li> <p><strong>Wilcoxon Rank-Sum Test</strong>: A non-parametric test used when the populations are not normally distributed.</p> </li> <li> <p><strong>ANOVA (Analysis of Variance)</strong>: Applied when comparing the means of more than two populations. ANOVA checks if at least one pair of population means differ.</p> <ul> <li><strong>One-Way ANOVA</strong>: Involves one independent factor.</li> <li><strong>Two-Way ANOVA</strong>: Involves two independent factors.</li> </ul> <p><strong>Limitations of ANOVA</strong>:</p> <ul> <li>Assumes data is normally distributed.</li> <li>Sensitive to outliers.</li> <li>Does not specify which pairs of means are different, requiring further analysis with tests like HSD (Honest Significant Difference).</li> </ul> </li> </ol> <h4 id="clustering-analysis">Clustering Analysis</h4> <p>Clustering is a method of unsupervised learning that groups a set of objects in such a way that objects in the same group (or cluster) are more similar to each other than to those in other groups. We covered three major clustering algorithms:</p> <ol> <li><strong>K-Means Clustering</strong>: <ul> <li>A hard clustering algorithm where each object is a point in an n-dimensional space.</li> <li>Objects are clustered based on their proximity to k randomly initialized centroids.</li> <li>The algorithm iteratively assigns points to the nearest centroid and updates the centroids until convergence.</li> <li>Commonly used in image processing, medical diagnosis, and data compression.</li> </ul> <p><strong>Challenges</strong>:</p> <ul> <li>Sensitive to noise and outliers.</li> <li>May result in empty clusters or vary in density.</li> <li>Dependent on the initial positioning of centroids, which may require multiple runs.</li> </ul> </li> <li><strong>DBSCAN (Density-Based Spatial Clustering of Applications with Noise)</strong>: <ul> <li>Locates regions of high density that are separated by regions of low density.</li> <li>Classifies points as core points, border points, or noise points based on a density threshold (MinPts) and a radius (Eps).</li> <li>Resistant to noise and outliers, and capable of handling clusters of varying shapes and sizes.</li> </ul> <p><strong>Limitations</strong>:</p> <ul> <li>Struggles with varying densities.</li> <li>Not well-suited for sparse or high-dimensional data without additional techniques.</li> </ul> </li> <li><strong>Self-Organizing Maps (SOM)</strong>: <ul> <li>A type of neural network used for clustering and visualization.</li> <li>Projects high-dimensional data onto a lower-dimensional space while preserving the topology.</li> <li>Useful for data visualization and exploration, especially when dealing with missing values or new data.</li> </ul> <p><strong>When Not to Use SOM</strong>:</p> <ul> <li>Data is very sparse.</li> <li>The resolution of the map is limited.</li> <li>Lack of multi-core computational resources.</li> </ul> </li> </ol> <h3 id="conclusion">Conclusion</h3> <p>This week’s focus on hypothesis testing and clustering provides a foundation for understanding and applying these methods in big data analytics. Each technique has its strengths and limitations, and the choice of method depends on the nature of the data and the specific problem at hand. Whether testing hypotheses or uncovering hidden patterns in data, these tools are essential for effective data analysis.</p> <p><a href="/assets/pdf/bigdata/w4-Clustering.pdf">Lecture 3</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Clustering]]></summary></entry><entry><title type="html">CSCI971 - Modern Cryptography Week 3</title><link href="https://karangoel59.com/blog/2024/crypto-week3/" rel="alternate" type="text/html" title="CSCI971 - Modern Cryptography Week 3"/><published>2024-08-10T01:09:00+10:00</published><updated>2024-08-10T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/crypto-week3</id><content type="html" xml:base="https://karangoel59.com/blog/2024/crypto-week3/"><![CDATA[<p>How to construct symmetric key encription</p> <p>We will use computer complexity and check if scheme is secure</p> <p>Roadmap Classic Cipher = Ceaser Cipher (algo based) One time pad = Shannon</p> <p>How to design a block cipher</p> <p>Confusion and Diffusion: Design Principles</p> <p>Confusion = if a single bit key is changed, cypher text is significantly different Diffusion = if a single bit in plaintext is changed, cypher text is significantly different</p> <p>Change in plain text and and key result significant change in cypher text</p> <p>This is called avalanche effect</p> <p>Block Cipher Message -&gt; Enc(key) -&gt; Cipher -&gt; Dec(key) -&gt; Message</p> <p>Typical block size 64 bits 128 bits</p> <p>Common Design Approaches iterated cipher =&gt; each iteration is called round. The output of each round is input to next round</p> <p>DES = 16 rounds AES = 10 rounds</p> <p>Each Round inside AES is: Subsitution Permutation network</p> <p>DES (Data Encryption Standard)</p> <p>why it is developed 1970 need standard encryption scheme</p> <p>Standard need to have following properties</p> <ul> <li>high level security</li> <li>accordance with Kirchoff’s law</li> <li>economic</li> <li>adaptable</li> </ul> <p>DES (64 bit input, 64 bit output, 56 bit key)</p> <p>16 round Feistel Network</p> <p>Feistel Network</p> <p>introduced by Feistel</p> <p>how it work</p> <p>original input - divide into two part L0- 32 bit R0 - 32 bit</p> <p>(check week 3 slides) R1 = R0 -&gt; F(K) -&gt; XOR L0 L1 = R0</p> <p>Last Round</p> <p>LN = R(N-1) RN = R(N-1) -&gt; F(K) -&gt; XOR L(N-1)</p> <p>S-box</p> <p>An S-box is a basic component in symmetric key algorithms, used to perform substitution. It takes an input of a fixed size (a string of bits) and transforms it into an output of a fixed size. This substitution process is nonlinear, which is essential for the cryptographic strength of the algorithm</p> <p>Des shortcomming 2^56 keys = 10^17 keys (very short range keys)</p> <p>we can test keys in parallel</p> <p>3DES</p> <p>AES (Good enough for today) (I think there was a video in youtube) Does not use Feistel</p> <p>Is a blockcipher a secure symmetric-key encryption NO</p> <p>it preserve statistacilly property of plain text (if you use it directly)</p> <p>cypher text space should be much larger than plain text</p> <p>Solution Randomize Choose ramdom IV M’ = IV XoR M C &lt;- Enc(K,M’)</p> <p>We say that the encryption is secure if no P.P.T adversary can win with a probability of ½+1/poly(λ)</p> <p>The underlying blockcipher is assumed to be a pseudorandom function (PRF), i.e., outputs of the blockcipher is indistinguishable from random values.</p> <p>Encrypt long message</p> <p>Electronic Code Book Divide in block run cypher</p> <p>CBC (Cypher block chain) Initialize vector</p> <p>CFB (Cypher Feedback ) Cypher of one block use as input to other not IV</p> <p>Output feedback mode (OFB)</p> <p><a href="/assets/pdf/crypto/3.%20CSCI471971%20Symmetric-key%20Encryption.pdf">Lecture 3</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Block Cyphers and Symetric Key Encription"]]></summary></entry><entry><title type="html">CSCI927 - Service-Oriented Software Engineering Week 3</title><link href="https://karangoel59.com/blog/2024/sose-week3/" rel="alternate" type="text/html" title="CSCI927 - Service-Oriented Software Engineering Week 3"/><published>2024-08-07T18:30:00+10:00</published><updated>2024-08-07T18:30:00+10:00</updated><id>https://karangoel59.com/blog/2024/sose-week3</id><content type="html" xml:base="https://karangoel59.com/blog/2024/sose-week3/"><![CDATA[<p>Business Process Model and Notation (BPMN) is a widely-used standard for representing and analyzing business processes in a graphical format. It bridges the gap between business process design and implementation, making it an essential tool in the toolkit of service-oriented software engineering (SOSE). In this week’s post, we’ll explore the basics of BPMN, its key components, types of activities, events, gateways, and the concept of tokens.</p> <h3 id="what-is-bpmn">What is BPMN?</h3> <p>BPMN stands for Business Process Model and Notation. It is a standardized graphical notation that allows businesses to document, model, and understand their processes in a clear and concise way. BPMN is particularly valuable because it is designed to be understood by all business stakeholders—business analysts, technical developers, and process participants alike.</p> <h3 id="why-bpmn-is-important">Why BPMN is Important</h3> <p>In the realm of SOSE, BPMN plays a crucial role in the design and orchestration of services. By modeling business processes using BPMN, organizations can visualize the flow of activities, identify inefficiencies, and ensure that all aspects of the business process align with organizational goals. This is particularly important in service-oriented environments where multiple services interact with each other in complex ways.</p> <h3 id="key-components-of-bpmn">Key Components of BPMN</h3> <p>BPMN diagrams are composed of several core elements that represent different aspects of a business process. These include:</p> <ul> <li><strong>Flow Objects:</strong> <ul> <li><strong>Events</strong></li> <li><strong>Activities</strong></li> <li><strong>Gateways</strong></li> </ul> </li> <li><strong>Connecting Objects:</strong> <ul> <li><strong>Sequence Flows</strong></li> <li><strong>Message Flows</strong></li> <li><strong>Associations</strong></li> </ul> </li> <li><strong>Swimlanes:</strong> <ul> <li><strong>Pools</strong></li> <li><strong>Lanes</strong></li> </ul> </li> <li><strong>Artifacts:</strong> <ul> <li><strong>Data Objects</strong></li> <li><strong>Groups</strong></li> <li><strong>Annotations</strong></li> </ul> </li> </ul> <h3 id="types-of-activities-tasks-and-subprocesses">Types of Activities: Tasks and Subprocesses</h3> <p>Activities in BPMN represent the work being performed within a business process. They are primarily categorized into tasks and subprocesses.</p> <h4 id="tasks"><strong>Tasks</strong></h4> <p>A task is a basic unit of work that cannot be broken down further within the process context</p> <h4 id="subprocesses"><strong>Subprocesses</strong></h4> <p>A subprocess is a compound activity that encapsulates a set of tasks, providing a way to simplify and manage complex processes.</p> <h3 id="types-of-events-start-intermediate-and-end">Types of Events: Start, Intermediate, and End</h3> <p>Events in BPMN represent things that happen within a business process. These events are divided into three main types:</p> <h4 id="start-events"><strong>Start Events</strong></h4> <p>Start events initiate the process flow. Types include:</p> <ul> <li><strong>None Start Event:</strong> A simple start with no specific trigger.</li> <li><strong>Message Start Event:</strong> Triggered by the receipt of a message.</li> <li><strong>Timer Start Event:</strong> Begins the process at a specific time or after a defined period.</li> <li><strong>Conditional Start Event:</strong> Triggered when a condition becomes true.</li> <li><strong>Signal Start Event:</strong> Responds to a broadcast signal that can trigger multiple processes.</li> </ul> <h4 id="intermediate-events"><strong>Intermediate Events</strong></h4> <p>Intermediate events occur between the start and end events, affecting the flow of the process:</p> <ul> <li><strong>Catch Event:</strong> Waits for a trigger (e.g., message, timer, signal) before proceeding.</li> <li><strong>Throw Event:</strong> Generates a trigger that can influence the process or other processes.</li> <li><strong>Timer Intermediate Event:</strong> Introduces a delay or specifies timing within the process.</li> <li><strong>Message Intermediate Event:</strong> Indicates a point where the process sends or receives a message.</li> <li><strong>Error Intermediate Event:</strong> Handles errors that occur during the process.</li> <li><strong>Escalation Event:</strong> Used to indicate an escalation in a process, typically signaling a higher priority action.</li> </ul> <h4 id="end-events"><strong>End Events</strong></h4> <p>End events signify the completion of the process. Types include:</p> <ul> <li><strong>None End Event:</strong> Marks the simple end of a process.</li> <li><strong>Message End Event:</strong> Sends a final message when the process ends.</li> <li><strong>Error End Event:</strong> Indicates that the process ended due to an error.</li> <li><strong>Terminate End Event:</strong> Ends the entire process immediately, regardless of other ongoing activities.</li> <li><strong>Signal End Event:</strong> Broadcasts a signal that other processes can respond to.</li> </ul> <h3 id="types-of-gateways">Types of Gateways</h3> <p>Gateways control the divergence and convergence of the process flow. They represent decision points, where the process can take multiple paths. Types of gateways include:</p> <ul> <li><strong>Exclusive Gateway (XOR):</strong> Allows only one of several paths to be taken, based on conditions.</li> <li><strong>Parallel Gateway (AND):</strong> Allows multiple paths to be taken simultaneously.</li> <li><strong>Inclusive Gateway (OR):</strong> One or more paths can be taken based on conditions.</li> <li><strong>Event-Based Gateway:</strong> Directs the flow based on an event that occurs.</li> <li><strong>Complex Gateway:</strong> Combines multiple types of decision criteria, allowing for more advanced control.</li> </ul> <h3 id="the-concept-of-tokens-in-bpmn">The Concept of Tokens in BPMN</h3> <p>In BPMN, the concept of a token is used to represent the flow of control within a process. A token is an abstract representation of a process instance moving through the model. When a process is initiated, a token is created and it moves through the sequence flows, activities, and gateways.</p> <ul> <li><strong>Token and Activities:</strong> As the token moves through an activity, it represents the execution of that activity.</li> <li><strong>Token and Gateways:</strong> When a token reaches a gateway, the type of gateway determines how the token will proceed. For example, an exclusive gateway will allow the token to pass through only one of the available paths, while a parallel gateway will split the token into multiple tokens, one for each path.</li> </ul> <p>The movement of tokens through a BPMN diagram helps visualize how a process flows from start to end, including how decisions and parallel activities are handled.</p> <h3 id="bpmn-in-action">BPMN in Action</h3> <p>Let’s consider a simple example: an order processing system in an online store. Using BPMN, you could model the process starting from the customer placing an order, followed by order validation, payment processing, and finally, order fulfillment and delivery.</p> <ol> <li><strong>Start Event:</strong> The process begins with the customer placing an order.</li> <li><strong>Task:</strong> The system validates the order to ensure all information is correct.</li> <li><strong>Gateway:</strong> A decision is made whether the payment is successful.</li> <li><strong>Task:</strong> If successful, the order is sent to the warehouse for fulfillment.</li> <li><strong>End Event:</strong> The process concludes when the order is delivered to the customer.</li> </ol> <p>This simple diagram provides a clear and visual representation of the order process, making it easy to understand and analyze.</p> <h3 id="bpmn-and-sose">BPMN and SOSE</h3> <p>In SOSE, BPMN can be used to model the interactions between various services within a system. For example, in a service-oriented architecture, you might have services for customer management, order processing, inventory management, and shipping. BPMN allows you to model how these services interact, where the dependencies are, and how information flows between them.</p> <p>This not only helps in the design phase but also in monitoring and optimizing the processes once they are implemented. By using BPMN, you can ensure that your service architecture is aligned with business processes and is capable of adapting to changes in business needs.</p> <p><a href="/assets/pdf/sose/3.Business%20Process%20Modelling%20and%20Management.pdf">Lecture 3</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[BPMN]]></summary></entry><entry><title type="html">CSCI946 - Big Data Analytics Week 3</title><link href="https://karangoel59.com/blog/2024/big-data-week3/" rel="alternate" type="text/html" title="CSCI946 - Big Data Analytics Week 3"/><published>2024-08-06T01:09:00+10:00</published><updated>2024-08-06T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/big-data-week3</id><content type="html" xml:base="https://karangoel59.com/blog/2024/big-data-week3/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Data exploration is a critical stage in the data analytics lifecycle. It involves understanding and preparing data to facilitate effective analysis and model building. Here’s a streamlined overview of the key stages and techniques involved.</p> <h3 id="data-analytics-lifecycle">Data Analytics Lifecycle</h3> <p><strong>1. Discovery</strong></p> <ul> <li><strong>Learn Business Domain</strong>: Understand the industry and context.</li> <li><strong>Interview Sponsor &amp; Identify Stakeholders</strong>: Engage with key individuals to gather insights.</li> <li><strong>Define Resources &amp; Goals</strong>: Establish objectives and available resources.</li> <li><strong>Identify Potential Data Sources</strong>: Locate relevant data sources.</li> <li><strong>Frame the Problem &amp; Develop Initial Hypotheses</strong>: Formulate hypotheses, including Null Hypothesis (H0) and Alternative Hypothesis (HA or H1).</li> </ul> <p><strong>2. Data Preparation</strong></p> <ul> <li><strong>Prepare Sandbox</strong>: Set up an environment for data preparation.</li> <li><strong>Perform ETLT (Extract, Transform, Load, Transform)</strong>: Process data for analysis.</li> <li><strong>Understand Data Details</strong>: Examine the data’s structure and quality.</li> <li><strong>Data Conditioning</strong>: Address issues like missing values and outliers.</li> <li><strong>Format Data</strong>: Prepare data for analysis.</li> <li><strong>Visualize Data</strong>: Use plots to explore data patterns.</li> </ul> <p><strong>3. Model Planning</strong></p> <ul> <li><strong>Select Variables</strong>: Based on relationships (e.g., correlation matrix) and domain knowledge.</li> <li><strong>Identify Candidate Models</strong>: Refer to hypotheses, translate into machine learning models, review literature, and document assumptions.</li> </ul> <p><strong>4. Model Building</strong></p> <ul> <li><strong>Create Datasets</strong>: Prepare training, validation, and testing datasets.</li> <li><strong>Train and Test Models</strong>: Evaluate model performance.</li> </ul> <p><strong>5. Communicating Results</strong></p> <ul> <li><strong>Compare Results</strong>: Assess against criteria.</li> <li><strong>Articulate Findings</strong>: Clearly present results.</li> <li><strong>Discuss Limitations &amp; Recommendations</strong>: Provide insights on limitations and suggest improvements.</li> </ul> <p><strong>6. Operationalize</strong></p> <ul> <li><strong>Deliverables</strong>: Finalize and deliver the project.</li> <li><strong>Pilot Project</strong>: Test the model in a real-world scenario.</li> <li><strong>Performance &amp; Constraints</strong>: Monitor and address any constraints.</li> <li><strong>Training</strong>: Educate new users as needed.</li> </ul> <h3 id="key-objectives-of-data-exploration">Key Objectives of Data Exploration</h3> <ul> <li><strong>Understand Data Structure</strong>: Analyze data types, distributions (population vs. sampling), and summary statistics.</li> <li><strong>Assess Data Quality</strong>: Identify missing values, outliers, and duplicates.</li> <li><strong>Identify Patterns and Relationships</strong>: Use correlation to find relationships between variables.</li> <li><strong>Formulate Hypotheses</strong>: Develop hypotheses based on data patterns.</li> </ul> <h3 id="statistical-tools-and-techniques">Statistical Tools and Techniques</h3> <ul> <li><strong>Basic Statistics</strong>: Mean, median, variance, standard deviation, range, interquartile range (IQR).</li> <li><strong>Correlation and Covariance</strong>: Measure relationships between variables (cor(x,y), cov(x,y)).</li> <li><strong>Hypothesis Testing</strong>: Test hypotheses using p-values and confidence intervals. <ul> <li><strong>Two-Sample t-Test</strong>: Compare means of two populations.</li> <li><strong>Welch’s t-Test</strong>: Used when equal variance assumption is not justified.</li> <li><strong>Wilcoxon Rank-Sum Test</strong>: Non-parametric test for non-normal distributions.</li> </ul> </li> </ul> <h3 id="error-types-in-hypothesis-testing">Error Types in Hypothesis Testing</h3> <ul> <li><strong>Type I Error (α)</strong>: Incorrectly rejecting the null hypothesis when it is true.</li> <li><strong>Type II Error (β)</strong>: Failing to reject the null hypothesis when the alternative hypothesis is true. Reduce by increasing sample size.</li> </ul> <h3 id="conclusion">Conclusion</h3> <p>Effective data exploration is essential for successful data analysis and model building. By understanding data structure, assessing quality, and using appropriate statistical tools, you can make informed decisions and derive actionable insights.</p> <p><a href="/assets/pdf/bigdata/w3_DataPrep.pdf">Lecture 3</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Methods for Data Exploration]]></summary></entry><entry><title type="html">CSCI971 - Modern Cryptography Week 2</title><link href="https://karangoel59.com/blog/2024/crypto-week2/" rel="alternate" type="text/html" title="CSCI971 - Modern Cryptography Week 2"/><published>2024-08-03T01:09:00+10:00</published><updated>2024-08-03T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/crypto-week2</id><content type="html" xml:base="https://karangoel59.com/blog/2024/crypto-week2/"><![CDATA[<p>Modern Crypto</p> <p>shannon perfect cipher</p> <p>message xor key =&gt; cipheher cipheher xor key =&gt; message</p> <p>Perfect Secrecy: A cryptographic system is said to achieve perfect secrecy if the probability distribution of the plaintext, given the ciphertext, is the same as the a priori probability distribution of the plaintext. In simpler terms, even if an attacker has the ciphertext, they gain no additional information about the plaintext than they had before seeing the ciphertext.</p> <p>Pr[M=m]=Pr[M=m∣C=c] This equation means that the probability of any message m being the actual plaintext is the same whether or not the attacker has seen the ciphertext c. Thus, observing the ciphertext provides no additional advantage in guessing the plaintext.</p> <p>Def 2: For every pairs of messages m0, m1 in the message space M, and every ciphertext c in the ciphertext space C That means, the probability that C = c is the same for M = m0 or M = m1</p> <p>We can</p> <p>Theorem (Shannon) In a system with perfect secrecy the number of keys is at least equal to the number of messages</p> <p><a href="/assets/pdf/crypto/2.%20CSCI471971_Cryptographic%20Notions.pdf">Lecture 2</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Towards Modern Crypto"]]></summary></entry><entry><title type="html">CSCI927 - Service-Oriented Software Engineering Week 2</title><link href="https://karangoel59.com/blog/2024/sose-week2/" rel="alternate" type="text/html" title="CSCI927 - Service-Oriented Software Engineering Week 2"/><published>2024-07-31T18:30:00+10:00</published><updated>2024-07-31T18:30:00+10:00</updated><id>https://karangoel59.com/blog/2024/sose-week2</id><content type="html" xml:base="https://karangoel59.com/blog/2024/sose-week2/"><![CDATA[<p>Service-Oriented Software Engineering (SOSE) is a pivotal aspect of modern software development, especially in environments where services and their orchestration are central. In this week’s post, we delve into the essentials of service modeling and how it integrates with SOSE, using tools like UML and semantic web standards.</p> <h3 id="the-ubiquity-of-models">The Ubiquity of Models</h3> <p>Models are everywhere in software engineering. Take UML (Unified Modeling Language), for example—it’s a design language widely used for visualizing the architecture of software systems. But when we shift our focus to service-oriented architecture, the idea of service modeling becomes crucial.</p> <h3 id="service-description-vs-service-modeling">Service Description vs. Service Modeling</h3> <p>At its core, service modeling is about describing what a service does, how it does it, and the quality with which it performs its tasks. This includes:</p> <ul> <li><strong>Service Functionality (What):</strong> The core functional points or requirements of the service.</li> <li><strong>Information (How):</strong> How the service interacts with data, whether it’s sourcing, sinking, or using information.</li> <li><strong>Non-Functional Requirements:</strong> These quality factors define the service’s performance, reliability, and other characteristics.</li> </ul> <h3 id="web-service-standards">Web Service Standards</h3> <p>In the realm of web services, standards play a key role in service modeling:</p> <ul> <li><strong>Description:</strong> Web services are described using WSDL (Web Services Description Language).</li> <li><strong>Invocation:</strong> Services are invoked through protocols like SOAP or REST.</li> <li><strong>Discovery:</strong> UDDI (Universal Description, Discovery, and Integration) is used for discovering services.</li> </ul> <h3 id="semantic-web-and-service-modeling">Semantic Web and Service Modeling</h3> <p>Semantic web technologies push the boundaries of service modeling by adding well-defined meanings to data, making it more understandable by machines. Key semantic web languages include:</p> <ul> <li><strong>OWL-S:</strong> A semantic markup language for describing the properties and capabilities of web services.</li> <li><strong>WSMO:</strong> Web Service Modeling Ontology, which provides a conceptual framework for semantic web services.</li> <li><strong>WSDL:</strong> While traditionally used for service descriptions, it also supports semantic annotations.</li> </ul> <p>Most semantic web approaches adhere to a foundational model: <strong>Input-Output, Precondition-Effect (IOPE)</strong>. This structure forms the basics of any service modeling language.</p> <h3 id="examples-of-semantic-languages">Examples of Semantic Languages</h3> <p>Semantic languages like RDF (Resource Description Framework) and OWL (Web Ontology Language) are designed to provide explicit semantics, supporting ontology, interoperability, and inference. Here’s a simple RDF example:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;rdf:RDF</span> <span class="na">xmlns:rdf=</span><span class="s">"http://www.w3.org/1999/02/22-rdf-syntax-ns#"</span>
         <span class="na">xmlns:foaf=</span><span class="s">"http://xmlns.com/foaf/0.1/"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;rdf:Description</span> <span class="na">rdf:about=</span><span class="s">"http://example.org/person/JohnDoe"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;foaf:name&gt;</span>John Doe<span class="nt">&lt;/foaf:name&gt;</span>
    <span class="nt">&lt;foaf:age</span> <span class="na">rdf:datatype=</span><span class="s">"http://www.w3.org/2001/XMLSchema#integer"</span><span class="nt">&gt;</span>30<span class="nt">&lt;/foaf:age&gt;</span>
    <span class="nt">&lt;foaf:knows</span> <span class="na">rdf:resource=</span><span class="s">"http://example.org/person/JaneDoe"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/rdf:Description&gt;</span>
  <span class="nt">&lt;rdf:Description</span> <span class="na">rdf:about=</span><span class="s">"http://example.org/person/JaneDoe"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;foaf:name&gt;</span>Jane Doe<span class="nt">&lt;/foaf:name&gt;</span>
  <span class="nt">&lt;/rdf:Description&gt;</span>
<span class="nt">&lt;/rdf:RDF&gt;</span>
</code></pre></div></div> <h3 id="key-features-of-semantic-languages">Key Features of Semantic Languages</h3> <ul> <li><strong>Explicit Semantics:</strong> Providing machine-readable meanings for data.</li> <li><strong>Ontology Support:</strong> Defining complex relationships and hierarchies.</li> <li><strong>Interoperability:</strong> Facilitating data integration from diverse sources.</li> <li><strong>Inference:</strong> Allowing machines to infer new information from existing data.</li> </ul> <h3 id="the-role-of-logic-in-service-modeling">The Role of Logic in Service Modeling</h3> <p>In service modeling, logic plays a critical role:</p> <ul> <li><strong>First-Order Logic:</strong> Often used for describing static worlds.</li> <li><strong>Temporal Logic:</strong> Describes dynamic environments.</li> <li><strong>Other Logics:</strong> Dynamic logic, non-monotonic logic, etc., are also relevant.</li> </ul> <h3 id="conditions-and-assumptions-in-service-modeling">Conditions and Assumptions in Service Modeling</h3> <p>Understanding conditions and assumptions is vital:</p> <ul> <li><strong>Pre-Conditions:</strong> What we have before the service execution.</li> <li><strong>Post-Conditions:</strong> The state after the service is executed.</li> <li><strong>Assumptions:</strong> Hypotheses that need to be validated or revisited.</li> </ul> <h3 id="quality-of-service-qos">Quality of Service (QoS)</h3> <p>QoS is a crucial aspect of service modeling. It measures the effectiveness of business processes, including:</p> <ul> <li><strong>Delivery Schedules:</strong> Timing and deadlines for service delivery.</li> <li><strong>Payment Schedules:</strong> Financial terms tied to service fulfillment.</li> </ul> <h3 id="applying-service-modeling-in-teams">Applying Service Modeling in Teams</h3> <p>To effectively apply service modeling concepts in a team, consider the following:</p> <p><strong>External Aspects:</strong></p> <ul> <li>Define team goals and functions.</li> <li>Identify stakeholders.</li> <li>Outline conditions and assumptions.</li> <li>Establish QoS parameters.</li> <li>Set delivery schedules.</li> <li>Develop an escalation matrix for penalties.</li> </ul> <p><strong>Internal (Software Engineering) Aspects:</strong></p> <ul> <li>Build a knowledge base using semantics.</li> <li>Select appropriate tools.</li> <li>Determine team composition and ownership.</li> <li>Delegate services wisely.</li> </ul> <h3 id="invocation-and-response-handling">Invocation and Response Handling</h3> <p>Finally, understanding how to invoke services and handle responses is essential:</p> <ul> <li><strong>Invocation:</strong> Specify how requests are made.</li> <li><strong>Response:</strong> Define how responses will be delivered.</li> </ul> <p><a href="/assets/pdf/sose/2.Service%20Modelling.pdf">Lecture 2</a> <a href="/assets/pdf/sose/The%20Business%20Service%20Representation%20Language%20-%20A%20Preliminary%20Report%20(1).pdf">Paper</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Service Modeling]]></summary></entry><entry><title type="html">CSCI946 - Big Data Analytics Week 2</title><link href="https://karangoel59.com/blog/2024/big-data-week2/" rel="alternate" type="text/html" title="CSCI946 - Big Data Analytics Week 2"/><published>2024-07-30T01:09:00+10:00</published><updated>2024-07-30T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/big-data-week2</id><content type="html" xml:base="https://karangoel59.com/blog/2024/big-data-week2/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>In this post, we’ll delve into the data lifecycle, focusing on the different stages, key roles, and common pitfalls associated with managing big data projects. Understanding these elements is crucial for successful data science endeavors.</p> <h2 id="key-stages-of-the-data-lifecycle">Key Stages of the Data Lifecycle</h2> <ol> <li><strong>Discovery</strong> <ul> <li><strong>Domain Understanding</strong>: Comprehend the industry and project objectives.</li> <li><strong>Criteria of Success/Failure</strong>: Define what success looks like and identify potential challenges.</li> <li><strong>Interviews</strong>: Engage with sponsors and stakeholders to gather initial insights.</li> <li><strong>Initial Hypotheses</strong>: Formulate preliminary hypotheses based on the gathered information.</li> </ul> </li> <li><strong>Data Source Identification</strong> <ul> <li>Identify and gather relevant data sources from various departments and warehouses.</li> </ul> </li> <li><strong>Data Preparation</strong> <ul> <li><strong>Sandbox Environment</strong>: Set up a sandbox for data preparation.</li> <li><strong>ETLT (Extract, Transform, Load, Transform)</strong>: Perform data extraction, transformation, and loading. Note that ELT can be slow for large datasets, so ETLT is often preferred.</li> <li><strong>Data Conditioning</strong>: Assess the quality of data, addressing noise, outliers, and missing values.</li> <li><strong>Survey and Visualization</strong>: Use plots such as scatter plots, histograms, and heat maps to understand data distributions and correlations.</li> <li><strong>Scaling and Normalization</strong>: Apply techniques like Z-normalization to standardize data.</li> </ul> </li> <li><strong>Model Planning</strong> <ul> <li><strong>Identify Candidate Models</strong>: Select models based on hypotheses and literature review.</li> <li><strong>Variable Selection</strong>: Choose the relevant variables for modeling.</li> <li><strong>Tools and Languages</strong>: Decide on the tools and programming languages for model development.</li> </ul> </li> <li><strong>Model Building</strong> <ul> <li><strong>Training and Testing</strong>: Separate data for training and testing if necessary to validate model performance.</li> </ul> </li> <li><strong>Communication of Results</strong> <ul> <li><strong>Comparison</strong>: Evaluate the results against success criteria.</li> <li><strong>Reporting</strong>: Clearly communicate the insights and findings.</li> </ul> </li> <li><strong>Operationization</strong> <ul> <li><strong>Implementation</strong>: Finalize and communicate the benefits of the model.</li> <li><strong>Pilot Project</strong>: Test the model in a pilot project to ensure its effectiveness.</li> </ul> </li> </ol> <h2 id="common-mistakes-in-data-science-projects">Common Mistakes in Data Science Projects</h2> <ul> <li><strong>Rushing into Data Collection and Analysis</strong>: Prematurely jumping into analysis without proper planning can lead to suboptimal results.</li> <li><strong>Insufficient Planning</strong>: Not spending adequate time on planning can result in missing critical insights and inefficiencies.</li> </ul> <h2 id="key-roles-in-data-science-projects">Key Roles in Data Science Projects</h2> <ul> <li><strong>Business User</strong>: Provides context and requirements.</li> <li><strong>Project Sponsor</strong>: Supports and funds the project.</li> <li><strong>Project Manager</strong>: Oversees project execution and ensures timelines are met.</li> <li><strong>Business Intelligence Analyst</strong>: Analyzes business data to inform decisions.</li> <li><strong>Database Administrator</strong>: Manages and maintains database systems.</li> <li><strong>Data Engineer</strong>: Develops and maintains data pipelines.</li> <li><strong>Data Scientist</strong>: Designs, implements, and deploys models to derive actionable insights.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>Understanding and managing the data lifecycle is essential for successful data science projects. By following a structured approach and avoiding common mistakes, you can ensure that your data projects are effective and deliver valuable insights.</p> <p><a href="/assets/pdf/bigdata/w2-BDLifecycle.pdf">Lecture 2</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Exploring the key stages and roles in the data lifecycle for effective data science projects.]]></summary></entry><entry><title type="html">CSCI971 - Modern Cryptography Week 1</title><link href="https://karangoel59.com/blog/2024/crypto-week1/" rel="alternate" type="text/html" title="CSCI971 - Modern Cryptography Week 1"/><published>2024-07-27T01:09:00+10:00</published><updated>2024-07-27T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/crypto-week1</id><content type="html" xml:base="https://karangoel59.com/blog/2024/crypto-week1/"><![CDATA[<p>Classic Crypto</p> <p>Stream Ciphers</p> <p>random keys</p> <p><a href="/assets/pdf/crypto/1.%20CSCI471971_Introduction.pdf">Lecture 1</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Introduction"]]></summary></entry><entry><title type="html">CSCI927 - Service-Oriented Software Engineering Week 1</title><link href="https://karangoel59.com/blog/2024/sose-week1/" rel="alternate" type="text/html" title="CSCI927 - Service-Oriented Software Engineering Week 1"/><published>2024-07-24T18:30:00+10:00</published><updated>2024-07-24T18:30:00+10:00</updated><id>https://karangoel59.com/blog/2024/sose-week1</id><content type="html" xml:base="https://karangoel59.com/blog/2024/sose-week1/"><![CDATA[<h2 id="introduction-to-service-oriented-computing-soc">Introduction to Service-Oriented Computing (SOC)</h2> <p><strong>Service-Oriented Computing (SOC)</strong> is a paradigm that leverages services as fundamental components for building and deploying applications. Services in SOC are self-describing, platform-agnostic elements designed to facilitate the rapid and cost-effective creation of distributed applications.</p> <h3 id="core-concepts">Core Concepts</h3> <p>Certainly, Vatsa! Here’s how you can incorporate the concept of a <strong>Service Registry</strong> into your explanation of Service-Oriented Architecture (SOA):</p> <hr/> <p><strong>Service-Oriented Architecture (SOA)</strong> is the backbone of SOC, guiding the organization of software applications into a cohesive framework. SOA provides a structured way to reorganize applications, enabling services to be composed, discovered, and consumed effectively.</p> <ul> <li><strong>Service Providers</strong>: Organizations that offer services. They handle the procurement, implementation, and support of these services.</li> <li><strong>Service Clients</strong>: Applications or users that consume services, which can be internal or external to the organization.</li> <li><strong>Service Registry</strong>: The Service Registry acts as a centralized directory where services are registered by service providers.</li> </ul> <p>The service provider, service discovery agency, and service requestor (client) interact through three key operations: publish, find, and bind.</p> <h3 id="key-characteristics-of-services">Key Characteristics of Services</h3> <ol> <li><strong>Technology Neutral</strong>: Services must be accessible through standardized technologies compatible with a broad range of IT environments. This includes adhering to common protocols and discovery mechanisms.</li> <li><strong>Loosely Coupled</strong>: Services should operate independently, without requiring knowledge of each other’s internal structures.</li> <li><strong>Location Transparency</strong>: Services should be defined and located in a repository (e.g., UDDI) and should be accessible regardless of their physical location.</li> </ol> <h3 id="types-of-services">Types of Services</h3> <ul> <li><strong>Simple Services</strong>: Basic services that perform specific tasks.</li> <li><strong>Composite Services</strong>: These combine existing services to create more complex functionalities, integrating data and operations from multiple sources.</li> </ul> <h3 id="web-services">Web Services</h3> <p>A <strong>web service</strong> is a type of service identified by a URI and adheres to the following:</p> <ul> <li><strong>Internet Standards</strong>: It exposes its functionality using standard internet languages and protocols.</li> <li><strong>Self-Describing Interface</strong>: Based on open standards (e.g., XML), and published in network-based repositories.</li> </ul> <p><strong>Interactions</strong>: Web services typically interact through SOAP calls, using XML data. The service descriptions are defined using WSDL (Web Services Description Language), which specifies the service’s ports, types, and bindings.</p> <h3 id="service-discovery">Service Discovery</h3> <p><strong>UDDI (Universal Description, Discovery, and Integration)</strong> is a directory service for publishing and discovering web services. It enables clients to locate services and understand their details.</p> <h3 id="evolution-of-soc">Evolution of SOC</h3> <p>The SOC paradigm expands the <strong>software-as-a-service (SaaS)</strong> concept beyond simple applications to include complex business processes and transactions. This flexibility allows services to be reused and integrated dynamically.</p> <h3 id="service-oriented-architecture-soa">Service-Oriented Architecture (SOA)</h3> <p>SOA restructures previously isolated software applications into an interconnected network of services. It emphasizes:</p> <ul> <li><strong>Interoperability</strong>: Services communicate through standard interfaces and messaging protocols.</li> <li><strong>Service Interaction</strong>: Clients request services, and providers deliver them. Both roles can be fulfilled by the same agent.</li> </ul> <h3 id="designing-reliable-services">Designing Reliable Services</h3> <p><strong>Service Specification</strong> allows for the design and integration of services without requiring knowledge of their internal implementations. This abstraction enables reliable service composition based on defined interfaces and interactions.</p> <p><strong>The Limitations of Basic SOA and the Role of Extended SOA (ESOA)</strong></p> <p>Basic Service-Oriented Architecture (SOA) often falls short in addressing broader concerns like management, service orchestration, transaction management, coordination, security, and other cross-cutting concerns that affect all components within a service architecture. To tackle these challenges, Extended SOA (ESOA) comes into play.</p> <p><img src="/assets/img/Service-Oriented-Computing-Concepts-Characteristics-and-Directions-pdf.png" alt="Machine Vision" width="500"/></p> <p><strong>Service Composition in ESOA</strong></p> <p>The service composition layer in ESOA plays a crucial role in consolidating multiple services into a single, cohesive composite service. This layer ensures that the necessary roles and functionalities are in place to seamlessly integrate these services.</p> <p><strong>The Role of Service Aggregators</strong></p> <p>Within ESOA, a service aggregator acts as a service provider that combines services from various other providers into a distinct, value-added offering. This aggregation not only enhances the overall service value but also simplifies access for the service requestors.</p> <p><strong>Managed Services in ESOA</strong></p> <p>To effectively manage critical applications and specific markets, ESOA introduces managed services within the service management layer, represented at the top of the ESOA pyramid. This layer is crucial for maintaining the integrity and performance of vital solutions.</p> <p><strong>Grid Services and the Service Grid Bus</strong></p> <p>ESOA’s service management layer leverages grid services to create an enabling infrastructure for systems and applications. This infrastructure, known as the service grid bus (SGB), provides a high-level abstraction and management framework. It allows services within an open marketplace to function cohesively as a unified entity and collaborate effectively with other services. The SGB addresses critical application and system management concerns, ensuring end-to-end quality of service within dynamic virtual marketplaces.</p> <p><a href="/assets/pdf/sose/1.Subject%20Introduction%20-%20SOC%20Preliminaries.pdf">Lecture 1</a> <a href="/assets/pdf/sose/Service%20-Oriented%20Computing%20-%20Concepts,%20Characteristics%20and%20Directions.pdf">Paper</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[An overview of Service-Oriented Computing (SOC), its principles, and its application in modern software architecture.]]></summary></entry><entry><title type="html">CSCI946 - Big Data Analytics Week 1</title><link href="https://karangoel59.com/blog/2024/big-data-week1/" rel="alternate" type="text/html" title="CSCI946 - Big Data Analytics Week 1"/><published>2024-07-23T01:09:00+10:00</published><updated>2024-07-23T01:09:00+10:00</updated><id>https://karangoel59.com/blog/2024/big-data-week1</id><content type="html" xml:base="https://karangoel59.com/blog/2024/big-data-week1/"><![CDATA[<h3 id="sources-of-big-data">Sources of Big Data</h3> <p>Big Data is generated from various sources, including:</p> <ul> <li>Mobile sensors</li> <li>Social media platforms</li> <li>Smart grids</li> <li>Video rendering</li> <li>Medical imaging</li> <li>Genetic data</li> <li>Surveillance cameras</li> <li>Geophysical data</li> </ul> <h3 id="understanding-big-data-its-not-just-about-size">Understanding Big Data: It’s Not Just About Size</h3> <p>Big Data isn’t defined solely by its size; it’s characterized by several key properties, often referred to as the “Vs”:</p> <ul> <li><strong>Velocity</strong>: The speed at which data is generated and processed.</li> <li><strong>Volume</strong>: The sheer amount of data produced.</li> <li><strong>Variety</strong>: The different types of data (structured, semi-structured, unstructured).</li> <li><strong>Value</strong>: The business value that can be derived from the data.</li> <li><strong>Veracity</strong>: The reliability and accuracy of the data.</li> <li><strong>Variability</strong>: The changing nature of data, including inconsistencies and peaks in data flow.</li> </ul> <h3 id="structures-of-big-data">Structures of Big Data</h3> <p>Big Data can be categorized based on its structure, which influences how it is processed and analyzed:</p> <ol> <li><strong>Unstructured Data</strong>: <ul> <li><strong>Description</strong>: Data without a predefined model or organization. It often includes large amounts of text but can also encompass images, videos, and social media content.</li> <li><strong>Examples</strong>: Emails, videos, social media posts, satellite images, presentations.</li> </ul> </li> <li><strong>Quasi-Structured Data</strong>: <ul> <li><strong>Description</strong>: Data with some level of organization but lacking a fixed schema. It often includes metadata or tags to provide a basic structure.</li> <li><strong>Examples</strong>: Web server logs, network logs, event logs.</li> </ul> </li> <li><strong>Semi-Structured Data</strong>: <ul> <li><strong>Description</strong>: Data that doesn’t reside in a traditional database but still has some organizational properties, often using tags or markers to enforce a hierarchical structure.</li> <li><strong>Examples</strong>: XML files, JSON documents, emails (with metadata such as sender, receiver, and date).</li> </ul> </li> <li><strong>Structured Data</strong>: <ul> <li><strong>Description</strong>: Highly organized data, typically stored in databases with a predefined schema. It is arranged into rows and columns, making it easy to enter, query, and analyze.</li> <li><strong>Examples</strong>: Relational databases, spreadsheets, SQL tables.</li> </ul> </li> </ol> <p>This classification is essential for determining the appropriate tools and techniques for processing and analyzing data based on its structure.</p> <h3 id="business-intelligence-vs-data-science">Business Intelligence vs. Data Science</h3> <ul> <li><strong>Business Intelligence (BI)</strong>: Focuses on analyzing and exploring past data to make informed business decisions.</li> <li><strong>Data Science</strong>: Emphasizes predicting future trends and patterns by analyzing current and historical data.</li> </ul> <p><a href="/assets/pdf/bigdata/w1-Introduction.pdf">Lecture 1</a></p>]]></content><author><name></name></author><category term="learning"/><category term="projects"/><category term="learning"/><category term="uow"/><summary type="html"><![CDATA[Introduction to Big Data]]></summary></entry></feed>